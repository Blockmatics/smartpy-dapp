import smartpy as sp

class SmartTokens(sp.Contract):
    def __init__(self, creator, name, symbol, decimals, supply): 
        self.init_supply = supply  10 * decimals
        self.creator = creator
        self.allowance = {}
        self.allowance[creator] = {}
        self.balance_of = {}
        self.balance_of[creator]=self.init_supply
        self.init(allowance = self.allowance,balance_of=self.balance_of,total_supply=self.init_supply, symbol=symbol)

    @sp.entryPoint
    def spenderAllowance(self, params):
        sp.verify(0 <= params.amount) 
        sp.if (~self.data.allowance.contains(sp.sender)):
            self.data.allowance[sp.sender]={}
        self.data.allowance[sp.sender][params.to]= params.amount

    @sp.entryPoint
    def transfer(self, params):
        sp.verify (self.data.balance_of.contains(sp.sender))
        sp.verify(0 < params.amount)
        sp.verify(params.amount<=self.data.balance_of[sp.sender])
        self.data.balance_of[sp.sender]-=params.amount
        sp.if (~self.data.balance_of.contains(params.to)):
            self.data.balance_of[params.to]=0
        self.data.balance_of[params.to]+=params.amount

    @sp.entryPoint
    def transferFrom(self, params):
        sp.verify (self.data.allowance.contains(params._from))
        sp.verify (self.data.allowance[params._from].contains(sp.sender))
        sp.verify (self.data.balance_of.contains(params._from))
        sp.verify(0 < params.amount)
        sp.verify(params.amount<=self.data.balance_of[params._from])
        sp.verify(params.amount<=self.data.allowance[params._from][sp.sender])
        self.data.balance_of[params._from]-=params.amount
        self.data.allowance[params._from][sp.sender]-=params.amount
        sp.if (~self.data.balance_of.contains(params.to)):
            self.data.balance_of[params.to]=0
        self.data.balance_of[params.to]+=params.amount

    @sp.entryPoint
    def mint(self, params):
        sp.verify(self.creator == sp.sender)
        sp.verify(0 < params.amount)
        self.data.total_supply += params.amount
        sp.if (~self.data.balance_of.contains(params.to)):
            self.data.balance_of[params.to]=0
        self.data.balance_of[params.to]+=params.amount
    
    @sp.entryPoint
    def burnFrom(self, params):
        sp.verify(self.creator == sp.sender)
        sp.verify(0 < params.amount)
        sp.verify(params.amount <= self.data.total_supply)
        sp.verify(self.data.balance_of.contains(params._from))
        sp.verify(params.amount <= self.data.balance_of[params._from])
        self.data.total_supply -= params.amount
        self.data.balance_of[params._from]-=params.amount
    
@addTest(name = "TestSmartTokens")
def testSmartTokens():
    
    #Address Initializations
    creator = sp.address("tz1MGJKeEoJpNZY3rP9V8yHWVrLPSRJvTyU2")
    bob = sp.address("tz1aJLzguZuqbf1oH8aSPPiqrjed4H1YRDFi")
    alice = sp.address("tz1L9k9MFd21xvcg5iHNSmZSkNUBVn6QhyKB")
    
    c1 = SmartTokens(creator=creator, name="test_name", symbol="TEST", decimals=2, supply=10000000)

    html  = c1.fullHtml()

    #A static amount of tokens (mutez) to use in testing
    value=20000

    # Testing transfer: creator is sending tokens to bob's address
    html += c1.transfer(to = bob,amount=value).run(sender = creator).html()

    # Testing Spender Allowance:
    # Bob is allowing alice's address to spend tokens from bob address
    html += c1.spenderAllowance(to = alice,amount=value).run(sender = bob).html()


    # Testing Transfer From:
    # Here, bob tries to transfer with the transfer_from function, however it needs allowance  value from alice's part to transfer 
    html += c1.transferFrom(_from=bob,to = creator,amount=value, ).run(sender=alice).html()

    # creator mint tokens into alice's account
    html += c1.mint(to = alice,amount=value).run(sender = creator).html()

    
    # Testing burnFrom:
    # Here, Creator burns tokens from alice 
    html += c1.burnFrom(_from=alice,amount=10000).run(sender = creator).html()
    
    setOutput(html)